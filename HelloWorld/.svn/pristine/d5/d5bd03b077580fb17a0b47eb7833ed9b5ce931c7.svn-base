package test.unit.com.bankapp;


import main.com.bankapp.Account;
import org.junit.Test;

import java.math.BigDecimal;

import static org.junit.Assert.*;

public class AccountTest {

    @Test
    public void itCreatesACheckingAccountWithZeroBalance() {

        Account testSubject = new Account();

        testSubject.setFirstName("Jane");
        testSubject.setLastName("Doe");
        testSubject.setupAccount();

        assertNotNull(testSubject.getAccountNumber());
        assertEquals(BigDecimal.ZERO, testSubject.getBalance());
    }

    @Test
    public void itDepositsToEmptyAccount() {

        Account testSubject = new Account();
        testSubject.deposit(BigDecimal.valueOf(100));
        assertEquals(BigDecimal.valueOf(100), testSubject.getBalance());
    }

    @Test
    public void itDepositsToAccountWithSomeBalance() {

        Account testSubject = new Account();

        testSubject.deposit(BigDecimal.valueOf(100));
        testSubject.deposit(BigDecimal.valueOf(50));

        assertEquals(BigDecimal.valueOf(150), testSubject.getBalance());
    }

    @Test(expected=IllegalArgumentException.class)
    public void itWontAllowNegativeDeposits() {

        Account testSubject = new Account();

        testSubject.deposit(BigDecimal.valueOf(-50));
    }

    @Test
    public void itDebitsOnceFromAccountWithSomeBalance() {

        Account testSubject = new Account();

        testSubject.deposit(BigDecimal.valueOf(100));
        testSubject.withdraw(BigDecimal.valueOf(10.50));

        assertEquals(BigDecimal.valueOf(89.50), testSubject.getBalance());
    }

    @Test
    public void itDebitsFromAccountWithSomeBalanceMultipleTimes() {

        Account testSubject = new Account();

        testSubject.deposit(BigDecimal.valueOf(100));
        testSubject.withdraw(BigDecimal.valueOf(10.50));
        testSubject.withdraw(BigDecimal.valueOf(25));

        assertEquals(BigDecimal.valueOf(64.50), testSubject.getBalance());
    }
}
